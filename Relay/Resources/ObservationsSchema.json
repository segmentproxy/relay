{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://segmentproxy.com/Resources/SegmentSchema.json",
  "title": "Observations",
  "oneOf": [ 
    {
      "title": "SegmentTrackEvent",
      "type": "object",
      "description": "Used to validate a segment.com `track` event",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^track$",
          "description": "Type of message, corresponding to the respective API method"
        },
        "event":        { "type": "string","description": "Version of the Tracking API that received the message, automatically set by Segment.", "$comment": "Used for Track messages."},
        "timestamp":    { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API\nIt is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string\n\nIf the event just happened, leave it out and we'll use the server's time. If you're importing data from the past, make sure you to provide a `timestamp`.See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "userId":       { "type": "string", "description": "Unique identifier for the user in your database\nA userId or an anonymousId is required\n\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "anonymousId":  { "type": "string", "description": "A pseudo-unique substitute for a User ID, for cases when you don't have an absolutely unique identifier. A userId or an anonymousId is required.\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "messageId":    { "type": "string", "description": "Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API."},
        "context":      { "$ref": "#/definitions/Context", "description": "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like `ip` address or `locale`\nSee the [Context field docs](/docs/connections/spec/common#context) for more detail."},
        "properties":   { "$ref": "#/definitions/TrackProperties", "description":"Event properties map" },
        "sentAt":       { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction\nIt is set automatically by the Segment tracking libraries. It is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string. See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "version":      { "type": "string","description": "Version of the Tracking API that received the message, automatically set by Segment."},
        "integrations": { "type": "array", "items": { "$ref": "#/definitions/Integration" }},
        "$schema":      { "type": "string", "$comment": "Included so json files can be edited with schema support"}
      },
      "required": ["type", "event", "timestamp","messageId", "context", "version"],
      "additionalProperties": false
    }, 
    {
      "title": "SegmentPageEvent",
      "type": "object",
      "description": "Used to validate a segment.com `page` event",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^page$",
          "description": "Type of message, corresponding to the respective API method"
        },
        "name":         { "type": "string","description": "Name of the page\nFor example, most sites have a 'Signup' page that can be useful to tag, so you can see users as they move through your funnel.", "$comment": "Used for Page and Screen.", "minLength": 10 },
        "timestamp":    { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API\nIt is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string\n\nIf the event just happened, leave it out and we'll use the server's time. If you're importing data from the past, make sure you to provide a `timestamp`.See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "userId":       { "type": "string", "description": "Unique identifier for the user in your database\nA userId or an anonymousId is required\n\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "anonymousId":  { "type": "string", "description": "A pseudo-unique substitute for a User ID, for cases when you don't have an absolutely unique identifier. A userId or an anonymousId is required.\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "messageId":    { "type": "string", "description": "Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API."},
        "context":      { "$ref": "#/definitions/Context", "description": "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like `ip` address or `locale`\nSee the [Context field docs](/docs/connections/spec/common#context) for more detail."},
        "properties":   { "$ref": "#/definitions/PageProperties", "description":"Event properties map" },
        "sentAt":       { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction\nIt is set automatically by the Segment tracking libraries. It is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string. See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "version":      { "type": "string","description": "Version of the Tracking API that received the message, automatically set by Segment."},
        "integrations": { "type": "array", "items": { "$ref": "#/definitions/Integration" }}
      },
      "required": ["type", "name", "timestamp","messageId", "context", "version"],
      "additionalProperties": false
    }, 
    {
      "title": "SegmentScreenEvent",
      "type": "object",
      "description": "Used to validate a segment.com `screen` event",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^screen$",
          "description": "Type of message, corresponding to the respective API method"
        },
        "name":         { "type": "string","description": "Name of the page\nFor example, most sites have a 'Signup' page that can be useful to tag, so you can see users as they move through your funnel.", "$comment": "Used for Page and Screen.", "minLength": 10 },
        "timestamp":    { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API\nIt is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string\n\nIf the event just happened, leave it out and we'll use the server's time. If you're importing data from the past, make sure you to provide a `timestamp`.See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "userId":       { "type": "string", "description": "Unique identifier for the user in your database\nA userId or an anonymousId is required\n\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "anonymousId":  { "type": "string", "description": "A pseudo-unique substitute for a User ID, for cases when you don't have an absolutely unique identifier. A userId or an anonymousId is required.\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "messageId":    { "type": "string", "description": "Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API."},
        "context":      { "$ref": "#/definitions/Context", "description": "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like `ip` address or `locale`\nSee the [Context field docs](/docs/connections/spec/common#context) for more detail."},
        "properties":   { "$ref": "#/definitions/ScreenProperties", "description":"Event properties map" },
        "sentAt":       { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction\nIt is set automatically by the Segment tracking libraries. It is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string. See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "version":      { "type": "string","description": "Version of the Tracking API that received the message, automatically set by Segment."},
        "integrations": { "type": "array", "items": { "$ref": "#/definitions/Integration" }}
      },
      "required": ["type", "name", "timestamp","messageId", "context", "version"],
      "additionalProperties": false
    },
    {
      "title": "IdentifyEvent",
      "type": "object",
      "description": "Used to validate a segment.com `identify` event",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^identify$",
          "description": "Type of message, corresponding to the respective API method"
        },
        "timestamp":    { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API\nIt is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string\n\nIf the event just happened, leave it out and we'll use the server's time. If you're importing data from the past, make sure you to provide a `timestamp`.See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "userId":       { "type": "string", "description": "Unique identifier for the user in your database\nA userId or an anonymousId is required\n\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "traits":       { "$ref": "#/definitions/Traits",  "description":"Free-form dictionary of traits of the user, like `email` or `name`.\nSee the [Traits field docs](/docs/connections/spec/identify#traits) for a list of reserved trait names." },
        "context":      { "$ref": "#/definitions/Context", "description": "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like `ip` address or `locale`\nSee the [Context field docs](/docs/connections/spec/common#context) for more detail."},
        "sentAt":       { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction\nIt is set automatically by the Segment tracking libraries. It is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string. See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "messageId":    { "type": "string", "description": "Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API."},
        "version":      { "type": "string","description": "Version of the Tracking API that received the message, automatically set by Segment."},
        "integrations": { "type": "array", "items": { "$ref": "#/definitions/Integration" }}
      },
      "required": ["type", "timestamp", "messageId", "context", "version"],
      "additionalProperties": false
    },
    {
      "title": "GroupEvent",
      "type": "object",
      "description": "Used to validate a segment.com `group` event",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^group$",
          "description": "Type of message, corresponding to the respective API method"
        },
        "timestamp":    { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API\nIt is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string\n\nIf the event just happened, leave it out and we'll use the server's time. If you're importing data from the past, make sure you to provide a `timestamp`.See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "userId":       { "type": "string", "description": "Unique identifier for the user in your database\nA userId or an anonymousId is required\n\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "groupId":      { "type": "string", "description": "A unique identifier for the group in your database.\nSee the [Group ID field docs](/docs/connections/spec/group#group-id) for more detail."},
        "traits":       { "$ref": "#/definitions/GroupTraits",  "description":"Free-form dictionary of traits of the group, like `email` or `name`\nSee the [Traits field docs](/docs/connections/spec/group#traits) for a list of reserved trait names" },
        "context":      { "$ref": "#/definitions/Context", "description": "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like `ip` address or `locale`\nSee the [Context field docs](/docs/connections/spec/common#context) for more detail."},
        "sentAt":       { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction\nIt is set automatically by the Segment tracking libraries. It is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string. See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "version":      { "type": "string","description": "Version of the Tracking API that received the message, automatically set by Segment."},
        "integrations": { "type": "array", "items": { "$ref": "#/definitions/Integration" }}
      },
      "required": ["type", "timestamp","messageId", "context", "version"],
      "additionalProperties": false
    },
    {
      "title": "AliasEvent",
      "type": "object",
      "description": "Used to validate a segment.com `alias` event",
      "properties": {
        "type": {
          "type": "string",
          "pattern": "^(alias)$",
          "description": "Message sent to link two user IDs together as a single person/customer"
        },
        "timestamp":    { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API\nIt is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string\n\nIf the event just happened, leave it out and we'll use the server's time. If you're importing data from the past, make sure you to provide a `timestamp`.See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "previousId":   { "type": "string", "description": "Previous unique identifier for the user\nSee the [Previous ID field docs](/docs/connections/spec/alias#previous-id) for more detail."},
        "userId":       { "type": "string", "description": "Unique identifier for the user in your database\nA userId or an anonymousId is required\n\nSee the [Identities docs](/docs/connections/spec/identify#identities) for more detail."},
        "context":      { "$ref": "#/definitions/Context", "description": "Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like `ip` address or `locale`\nSee the [Context field docs](/docs/connections/spec/common#context) for more detail."},
        "sentAt":       { "$ref": "#/definitions/vtTimestamp", "description": "Timestamp of when a message is sent to Segment, used for clock skew correction\nIt is set automatically by the Segment tracking libraries. It is an [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) date string. See the [Timestamps fields docs](/docs/connections/spec/common#timestamps) for more detail."},
        "version":      { "type": "string","description": "Version of the Tracking API that received the message, automatically set by Segment."},
        "integrations": { "type": "array", "items": { "$ref": "#/definitions/Integration" }}
      },
      "required": ["type","timestamp","userId", "previousId"],
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Context": {
      "type":"object",
      "description":"Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like `ip` address or `locale`\nSee the [Context field docs](/docs/connections/spec/common#context) for more detail",
      "properties": {
        "active":     { "type": "boolean", "description": "Whether a user is active <p>This is usually used to flag an .identify() call to just update the traits but not “last seen.”</p>" },
        "app":        { "$ref": "#/definitions/App", "description":"dictionary of information about the current application, containing name, version and build. <p>This is collected automatically from our mobile libraries when possible.</p>" },
        "campaign":   { "$ref": "#/definitions/UTMCode", "description":"Dictionary of information about the campaign that resulted in the API call, containing name, source, medium, term and content <p>This maps directly to the common UTM campaign parameters.</p>" },
        "device":     { "$ref": "#/definitions/Device", "description":"Dictionary of information about the device, containing id, manufacturer, model, name, type and version" },
        "groupId":    { "type": "string", "description":"Group / Account ID. <p>This is useful in B2B use cases where you need to attribute your non-group calls to a company or account. It is relied on by several Customer Success and CRM tools.</p>" },
        "ip":         { "$ref": "#/definitions/vtIP", "description":"Current user’s IP address" },
        "library":    { "$ref": "#/definitions/Library", "description":"Dictionary of information about the library making the requests to the API, containing name and version" },
        "locale":     { "type": "string", "description":"Locale string for the current user, for example en-US" },
        "location":   { "$ref": "#/definitions/Location", "description":"Dictionary of information about the user’s current location, containing city, country, latitude, longitude, region and speed" },
        "network":    { "$ref": "#/definitions/Network", "description":"Dictionary of information about the current network connection, containing bluetooth, carrier, cellular and wifi" },
        "os":         { "$ref": "#/definitions/OS", "description":"Dictionary of information about the operating system, containing name and version" },
        "page":       { "$ref": "#/definitions/Page", "description":"Dictionary of information about the current page in the browser, containing hash, path, referrer, search, title and url <p>Automatically collected by Analytics.js.</p>" },
        "userAgent":  { "type": "string", "description":"User agent of the device making the request" },
        "referer":    { "$ref": "#/definitions/Referrer", "description":"Dictionary of information about the way the user was referred to the website or app, containing type, name, url and link" },
        "screen":     { "$ref": "#/definitions/Screen", "description":"Dictionary of information about the device’s screen, containing density, height and width" },
        "timezone":   { "type": "string", "description":"Timezones are sent as tzdata strings to add user timezone information which might be stripped from the timestamp <p>Ex: America/New_York</p>" },
        "traits":     { "$ref": "#/definitions/Traits",  "description":"Dictionary of traits of the current user <p>This is useful in cases where you need to track an event, but also associate information from a previous identify call. You should fill this object the same way you would fill traits in an identify call.</p>" }
      },
      "required": ["active", "app", "library"],
      "patternProperties":{"^[a-z_]{3,}$": {}},
      "uniqueItems": true
    },
    "Integration" : {
      "type":"object",
      "properties": {},
      "patternProperties":{"^[a-z_]{3,}$": { "type": "boolean"}},
      "minProperties":1
    }, 
    "App": {
      "type":"object",
      "description":"Dictionary of information about the current application, containing name, version and build. <p>This is collected automatically from our mobile libraries when possible.</p>",
      "properties": {
        "name":       { "type" : "string", "description": "Name of the application sending the event." },
        "version":    { "type" : "string", "description": "Version of the application sending the event." },
        "build":      { "type" : "string", "description": "Build number of the application sending the event." }
      },
      "additionalProperties": false,
      "required": ["name", "version"],
      "uniqueItems": true
    },
    "UTMCode": {
      "type":"object",
      "description":"Dictionary of information about the campaign that resulted in the API call, containing name, source, medium, term and content <p>This maps directly to the common UTM campaign parameters.</p>",
      "properties": {
        "campaign": { "type" : "string", "description": "Campaign-based tracking tags group all of the content from one campaign in your analytics. The example UTM code below would help you attribute website traffic to links that were placed as a part of a 20% discount promotion you're hosting.", "$comment": "Example: utm_campaign=20percentpromocode" },
        "source":   { "type" : "string", "description": "A source-based URL parameter can tell you which website is sending you traffic. You could add the example code below to every link you post to your Facebook page, helping you to track all traffic that comes from Facebook.", "$comment":"Example: utm_source=Facebook"},
        "medium":   { "type" : "string", "description": "This type of tracking tag informs you of the medium that your tracked link is featured in. You can use the example UTM code below to track all traffic that comes from social media (as opposed to other mediums, like email).", "$comment":"Example: utm_medium=socialmedia" },
        "term":     { "type" : "string", "description": "A term- or keyword-based tracking code identifies the keywords you've paid for in a PPC ad. If you pay for a Google Ads campaign to rank under the keyword, \"marketing software,\" you might add the following UTM code to the end of the link you submit to Google to run this ad.", "$comment":"Example: utm_term=marketing+software" },
        "content":  { "type" : "string", "description": "This type of UTM code is used to track the specific types of content that point to the same destination from a common source and medium. It's often used in pay-per-click (PPC) campaigns or with two identical links on the same page, as shown in the sample UTM code below.", "$comment":"Example: utm_content=sidebarlink or utm_content=headerlink" }
      },
      "additionalProperties": false,
      "required": ["name", "source"],
      "uniqueItems": true
    },
    "Device": {
      "type":"object",
      "description":"Dictionary of information about the device, containing id, manufacturer, model, name, type and version",
      "properties": {
        "id":                 { "type" : "string", "description": "A segment specific device ID that may be fickle (opposed to advertisingId if enabled)" },
        "advertisingId":      { "type" : "string", "description": "A consistent device ID that the owner of the dive consents to being used to track use on it" },
        "adTrackingEnabled":  { "type" : "boolean", "description": "Has the used consented to ad based tracking" },
        "manufacturer":       { "type" : "string", "description": "The name of the manufacturer of the device" },
        "model":              { "type" : "string", "description": "The model of the device" },
        "name":               { "type" : "string", "description": "The name of the device" },
        "type":               { "type" : "string", "description": "What type of device is this" },
        "token":              { "type" : "string", "description": "" }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "Library": {
      "type":"object",
      "description":"Information on the library used to send this event",
      "properties": {
        "name":       { "type" : "string", "description": "The name of the library used to send the event. (language, environment etc.)" },
        "version":    { "type" : "string", "description": "The version of the library used to sent the event." }
      },
      "additionalProperties": false,
      "required": ["name", "version"],
      "uniqueItems": true
    },
    "Location": {
      "type":"object",
      "description":"Dictionary of information about the user’s current location, containing city, country, latitude, longitude, region and speed",
      "properties": {
        "country":    { "type" : "string", "description": "" },
        "city":       { "type" : "string", "description": "" },
        "latitude":   { "type" : "number", "description": "" },
        "longitude":  { "type" : "number", "description": "" },
        "speed":      { "type" : "number", "description": "" },
        "hasc":       { "$ref": "#/definitions/vtHASC", "description":"Dictionary of information about the operating system, containing name and version", "$comment": "This is a Nova specific addition to the segment.com spec." }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "Network": {
      "type":"object",
      "description":"Dictionary of information about the current network connection, containing bluetooth, carrier, cellular and wifi",
      "properties": {
        "bluetooth":  { "type" : "boolean", "description": "Device is using a bluetooth connection." },
        "cellular":   { "type" : "boolean", "description": "Device is using a cellular connection." },
        "wifi":       { "type" : "boolean", "description": "Device is using a wifi connection." },
        "carrier":    { "type" : "string", "description": "Device is using a carrier connection." }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "OS": {
      "type":"object",
      "description":"Dictionary of information about the operating system, containing name and version",
      "properties": {
        "name":     { "type" : "string", "description": "" },
        "version":  { "type" : "string", "description": "" }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "Address": {
      "type":"object",
      "description":"",
      "properties": {
        "city":       { "type" : "string", "description": "Name ot the city" },
        "country":    { "type" : "string", "description": "Name of the country" },
        "postalCode": { "type" : "string", "description": "Postal code that the building/streat is in " },
        "street":     { "type" : "string", "description": "Name of street and number of building" },
        "state":      { "type" : "string", "description": "Name of the state that the city belongs to" }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "Company": {
      "type":"object",
      "description":"Dictionary of information about the current page in the browser, containing hash, path, referrer, search, title and url <p>Automatically collected by Analytics.js.</p>",
      "properties": {
        "name":           { "type" : "string", "description": "" },
        "id":             { "type" : "string", "description": "" },
        "industry":       { "type" : "string", "description": "" },
        "employee_count": { "type" : "integer", "description": "" },
        "plan":           { "type" : "string", "description": "" }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "Traits": {
      "type":"object",
      "description":"Dictionary of traits of the current user <p>This is useful in cases where you need to track an event, but also associate information from a previous identify call. You should fill this object the same way you would fill traits in an identify call.</p>",
      "properties": {
        "name":         { "type": "string", "description": "Full name of a user <p> If you only pass a first and last name we’ll automatically fill in the full name for you.</p>"},
        "firstName":    { "type": "string", "description": "First name of a user"},
        "lastName":     { "type": "string", "description": "Last name of a user"},
        "gender":       { "type": "string", "description": "Gender of a user"},
        "salutation":   {"type": "string", "description": "The salutation used for the customer  <p>Example: “VP of Engineering”</p>"},
        "title":        { "type": "string", "description": "Title of a user, usually related to their position at a specific company <p>Example: “VP of Engineering”</p>"},
        "age":          { "type": "number", "description": "Age of a user" },
        "birthday":     { "$ref": "#/definitions/vtDate",  "description": "" },
        "email":        { "$ref": "#/definitions/vtEmailAddress", "description": "Email address of a user"},
        "phone":        { "$ref": "#/definitions/vtPhoneNumber",  "description": "" },
        "avatar":       { "$ref": "#/definitions/vtUrl", "description": "URL to an avatar image for the user" },
        "address":      { "$ref": "#/definitions/Address", "description": "Street address of a user optionally containing: city, country, postalCode, state or street" },
        "company":      { "$ref": "#/definitions/Company", "description": "Company the user represents, optionally containing: name (a String), id (a String or Number), industry (a String), employee_count (a Number) or plan (a String)" },
        "createdAt":    { "$ref": "#/definitions/vtTimestamp", "description": "Date the user’s account was first created <p>We recommend ISO-8601 date strings.</p>"},
        "username":     { "type": "string", "description": "User’s username <p> This should be unique to each user, like the usernames of Twitter or GitHub.</p>"},
        "website":      { "$ref": "#/definitions/vtPhoneNumber", "description": "Website of a user"},
        "description":  { "type": "string", "description": "Description of the user"}
      },
      "additionalProperties": true,
      "patternProperties":{"^[a-z_]{3,}$":{}},
      "minProperties":1,
      "uniqueItems": true
    },
    "GroupTraits": {
      "type":"object",
      "description":"Dictionary of traits of a group.",
      "properties": {
        "name":         { "type": "string", "description": "Full name of a user <p> If you only pass a first and last name we’ll automatically fill in the full name for you.</p>"},
        "industry":     { "type": "string"},
        "employees":    { "type": "integer"},
        "total billed": { "type": "number"},
        "plan":         { "type": "string"},
        "email":        { "$ref": "#/definitions/vtEmailAddress", "description": "Email address of a user"},
        "phone":        { "$ref": "#/definitions/vtPhoneNumber",  "description": "" }
      },
      "additionalProperties": true,
      "patternProperties":{"^[a-z_]{3,}$":{}},
      "minProperties":1,
      "uniqueItems": true
    },
    "Page": {
      "type":"object",
      "description":"Dictionary of information about the current page in the browser, containing hash, path, referrer, search, title and url <p>Automatically collected by Analytics.js.</p>",
      "properties": {
        "path":       { "type" : "string", "description": "" },
        "referrer":   { "type" : "string", "description": "" },
        "search":     { "type" : "string", "description": "" },
        "title":      { "type" : "string", "description": "" },
        "url":        { "$ref": "#/definitions/vtUrl", "description": "" }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "Referrer": {
      "type":"object",
      "description":"Dictionary of information about the way the user was referred to the website or app, containing type, name, url and link",
      "properties": {
        "type":     { "type" : "string", "description": "" },
        "name":     { "type" : "string", "description": "" },
        "url":      { "type" : "string", "description": "" },
        "link":     { "type" : "string", "description": "" }
      },
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "Screen": {
      "type":"object",
      "description":"Dictionary of information about the device’s screen, containing density, height and width",
      "properties": {
        "width":    { "type" : "integer", "description": "The width of the screen in pixels." },
        "height":   { "type" : "integer", "description": "The height of the screen in pixels" },
        "density":  { "type" : "integer", "description": "The pixel density of the screen", "$comment": "Can be sued to calculate physical dimensions." }
      },
      "required": ["width","height"],
      "additionalProperties": false,
      "minProperties":1,
      "uniqueItems": true
    },
    "TrackProperties": {
      "type":"object",
      "description":"Event properties",
      "properties": {
        "cart_id":          {"type": "string", "description": "Checkout transaction ID."},
        "checkout_id":      {"type": "string", "description": "Checkout transaction ID."},
        "step":             {"type": "number", "description": "Checkout transaction ID."},
        "order_id":         {"type": "string", "description": "Number representing a step in the checkout process."},
        "payment_method":   {"type": "string", "description": "String representing the payment method chosen."},
        "shipping_method":  {"type": "string", "description": "String representing the shipping the method chosen."},
        "affiliation":      {"type": "string", "description": "Store or affiliation from which this transaction occurred (e.g. Google Store)."},
        "value":            {"type": "number", "description": "Revenue ($) with discounts and coupons added in. For better flexibility and total control over tracking, we let you decide how to calculate how coupons and discounts are applied."},
        "revenue":          {"type": "number", "description": "Revenue ($) associated with the transaction (excluding shipping and tax)."},
        "shipping":         {"type": "number", "description": "Shipping cost associated with the transaction."},
        "tax":              {"type": "number", "description": "Total tax associated with the transaction."},
        "discount":         {"type": "number", "description": "Total discount associated with the transaction."},
        "coupon":           {"type": "string", "description": "Transaction coupon redeemed with the transaction."},
        "currency":         {"type": "string", "description": "Currency code associated with the transaction.", "maxLength": 3, "minLength": 2},
        "products":         {"type": "array",  "items": {"$ref": "#/definitions/ProductLine"}},
        "wishlist_id":      {"type": "string", "description": "Wishlist ID to which the product was added to."},
        "wishlist_name":    {"type": "string", "description": "Wishlist name to which the product was added to."},
        "share_via":        {"type": "string", "description": "Method of sharing."},
        "share_message":    {"type": "string", "description": "Message that the sender sent."},
        "recipient":        {"type": "string", "description": "Review body."},
        "review_body":      {"type": "string", "description": "Message that the sender sent."},
        "rating":           {"type": "string", "description": "Review rating."}
      },
      "additionalProperties": true,
      "patternProperties":{"^[a-z_]{3,}$":{}},
      "minProperties":1,
      "uniqueItems": true
    },
    "PageProperties": {
      "type":"object",
      "description":"Event properties",
      "properties": {
        "products":   {"type": "array", "items": {"$ref": "#/definitions/ProductLine"}},
        "name":       {"type": "string", "description": "Name of the page <p> This is reserved for future use.</p>"},
        "path":       {"type": "string", "description": "Path portion of the URL of the page <p> Equivalent to canonical path which defaults to location.pathname from the DOM API.</p>"},
        "referer":    {"type": "string", "description": "Full URL of the previous page <p> Equivalent to document.referrer from the DOM API.</p>"},
        "search":     {"type": "string", "description": "Query string portion of the URL of the page <p> Equivalent to location.search from the DOM API.</p>"},
        "url":        {"type": "string", "description": "Full URL of the page <p> First we look for the canonical url. If the canonical url is not provided, we use location.href from the DOM API.</p>"},
        "keywords":   {"type": "array", "items": {"type": "string"}, "description": "A list/array of kewords describing the content of the page. <p> The keywords would most likely be the same as, or similar to, the keywords you would find in an html meta tag for SEO purposes. This property is mainly used by content publishers that rely heavily on pageview tracking. This is not automatically collected.</p>"},
        "title":      {"type": "string", "description": "Title of the page <p> Equivalent to document.title from the DOM API.</p>"}
      },
      "additionalProperties": true,
      "patternProperties":{"^[a-z_]{3,}$":{}},
      "minProperties":1,
      "uniqueItems": true
    },
    "ScreenProperties": {
      "type":"object",
      "description":"Event properties",
      "properties": {
        "products":   {"type": "array", "items": {"$ref": "#/definitions/ProductLine"}},
        "name":       {"type": "string", "description": "Name of the screen <p>This is reserved for future use.</p>"}
      },
      "additionalProperties": true,
      "patternProperties":{"^[a-z_]{3,}$":{}},
      "minProperties":1,
      "uniqueItems": true
    },
    "ProductLine": {
      "type":"object",
      "description":"Dictionary of information about the device’s screen, containing density, height and width",
      "properties": {
        "product_id": { "type" : "string", "description": "Product id displayed on the list" },
        "sku":        { "type" : "string", "description": "Sku of the product being viewed" },
        "category":   { "type" : "string", "description": "Product category being viewed" },
        "name":       { "type" : "string", "description": "Name of the product being viewed" },
        "brand":      { "type" : "string", "description": "Brand associated with the product" },
        "variant":    { "type" : "string", "description": "Variant of the product (e.g. Black)" },
        "price":      { "type" : "number", "description": "Price ($) of the product being viewed" },
        "quantity":   { "type" : "number", "description": "Quantity of a product" },
        "coupon":     { "type" : "string", "description": "Coupon code associated with a product (e.g MAY_DEALS_3)" },
        "position":   { "type" : "number", "description": "Position in the product list (ex. 3)" },
        "url":        { "type" : "string", "description": "URL of the product page" },
        "image_url":  { "type" : "string", "description": "Image url of the product" }
      },
      "additionalProperties": true,
      "required":["product_id"],
      "uniqueItems": true
    },
    "vtTimestamp": {
      "type":"string",
      "format":"date-time"
    },
    "vtDate": {
      "type":"string",
      "format":"date"
    },
    "vtTime": {
      "type":"string",
      "format":"time"
    },
    "vtUrl": {
      "type":"string",
      "oneOf": [
        { "format": "url" },
        { "format": "idn-url" }
      ]
    },
    "vtMacAddress": {
      "type":"string",
      "pattern":"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
    },
    "vtIP": {
      "type": "string",
      "oneOf": [
        { "format": "ipv4" },
        { "format": "ipv6" }
      ]      
    },
    "vtIPv4": {
      "type": "string",
      "format": "ipv4"
    },
    "vtIPv6": {
      "type": "string",
      "format": "ipv6"
    },
    "vtEmailAddress": {
      "type": "string",
      "oneOf": [
        { "format": "email" },
        { "format": "idn-email" }
      ]      
    },
    "vtPhoneNumber": {
      "type": "string",
      "pattern": "^\\+\\d{1,3}\\s\\d{2,3}\\s\\d{2,3}\\s\\d{4}|^\\+\\d{1,3}\\s\\d{1,14}(\\s\\d{1,13})?|^\\(\\d{3}\\)\\s\\d{3}\\s\\d{4}?$",
      "description": ""
    },
    "vtHostname": {
      "type": "string",
      "oneOf": [
        { "format": "hostname" },
        { "format": "idn-hostname" }
      ]      
    },
    "vtUUID": {
      "type": "string",
      "$comment": "Use  format:duration once 09 is released.",
      "format": "uuid"
    },
    "vtGUID": {
      "type": "string",
      "minLength": 32,
      "pattern": "^[0-9A-Fa-f]{8}(?:-[0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}$"
    },
    "vtResourceIdentifier": {
      "type": "string",
      "oneOf": [
        { "format": "url" },
        { "format": "uri-reference" },
        { "format": "iri" },
        { "format": "iri-reference" }
      ]
    },
    "vtValueMap": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "field": {"type": "string"},
          "s_value": {"type": "string"},
          "i_value": {"type": "integer"},
          "n_value": {"type": "number"},
          "b_value": {"type": "boolean"}
        },
        "required": ["field"],
        "maxItems": 2
      }
    },
    "vtRegExp": {
      "type": "string",
      "format": "regex"
    },
    "vtHASC": {
      "type": "string",
      "minLength": 2, 
      "mazLength": 8,
      "pattern": "^[A-Z]{2}(.[a-z_]{2})?(.[a-z_]{2})?$"
    },
    "vtDuration": {
      "type": "string",
      "description": "Used to store ISO 8601 duration",
      "$comment": "Use  format:duration once 09 is released.",
      "pattern": "^P(?!$)(\\d+(?:\\.\\d+)?Y)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?W)?(\\d+(?:\\.\\d+)?D)?(T(?=\\d)(\\d+(?:\\.\\d+)?H)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?S)?)?$"
    },
    "vtCountryCode": {
      "type": "string",
      "pattern": "^[A-Z_]{2,3}$"
    },
    "vtGeo": {
      "type": "string",
      "description": "Geo string contains two or three numbers Latitude, Longitude and - optionally - Altitude",
      "pattern": "^(\\d*){2,3}$"
    }
  }
}